{"version":3,"sources":["logo.svg","components/Billing.js","components/Stepper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","table","minWidth","createData","name","charges","rows","SimpleTable","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","theme","root","width","backButton","marginRight","spacing","instructions","marginTop","marginBottom","HorizontalLabelPositionBelowStepper","React","useState","activeStep","setActiveStep","steps","Stepper","alternativeLabel","label","Step","StepLabel","length","Typography","Button","onClick","stepIndex","Billing","getStepContent","disabled","prevActiveStep","variant","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,qOCUrCC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OAId,SAASC,EAAWC,EAAMC,GACxB,MAAO,CAAED,OAAMC,WAGjB,IAAMC,EAAO,CACXH,EAAW,YAAa,SACxBA,EAAW,YAAa,SACxBA,EAAW,YAAa,SACxBA,EAAW,YAAa,UACxBA,EAAW,WAAY,SA+BVI,MA5Bf,WACE,IAAMC,EAAUT,IAEhB,OACE,kBAACU,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQP,MAAOa,aAAW,gBAC1C,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,CAAWC,MAAM,SAAjB,aAIJ,kBAACC,EAAA,EAAD,KACGb,EAAKc,KAAI,SAACC,GAAD,OACR,kBAACL,EAAA,EAAD,CAAUM,IAAKD,EAAIjB,MACjB,kBAACa,EAAA,EAAD,CAAWP,UAAU,KAAKa,MAAM,OAC7BF,EAAIjB,MAEP,kBAACa,EAAA,EAAD,CAAWC,MAAM,SAASG,EAAIhB,iBCpBtCN,EAAYC,aAAW,SAACwB,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,QAETC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,aAAc,CACZC,UAAWP,EAAMK,QAAQ,GACzBG,aAAcR,EAAMK,QAAQ,QA0BjB,SAASI,IACtB,IAAMzB,EAAUT,IAD4C,EAExBmC,IAAMC,SAAS,GAFS,mBAErDC,EAFqD,KAEzCC,EAFyC,KAGtDC,EAxBC,CAAC,mBAAoB,kBAAmB,qBAsC/C,OACE,yBAAKzB,UAAWL,EAAQiB,MACtB,kBAACc,EAAA,EAAD,CAASH,WAAYA,EAAYI,kBAAgB,GAC9CF,EAAMlB,KAAI,SAACqB,GAAD,OACT,kBAACC,EAAA,EAAD,CAAMpB,IAAKmB,GACT,kBAACE,EAAA,EAAD,KAAYF,QAIlB,6BACGL,IAAeE,EAAMM,OACpB,6BACE,kBAACC,EAAA,EAAD,CAAYhC,UAAWL,EAAQsB,cAA/B,uBACA,kBAACgB,EAAA,EAAD,CAAQC,QAjBE,WAClBV,EAAc,KAgBN,UAGF,6BACE,kBAACQ,EAAA,EAAD,CAAYhC,UAAWL,EAAQsB,cApD3C,SAAwBkB,GACtB,OAAQA,GACN,KAAK,EACH,MAAO,sCACT,KAAK,EACH,MAAO,uCACT,KAAK,EACH,OACE,6BACE,kBAACC,EAAD,OAIN,QACE,MAAO,qBAsC6CC,CAAed,IAC7D,6BACE,kBAACU,EAAA,EAAD,CACEK,SAAyB,IAAff,EACVW,QA7BK,WACjBV,GAAc,SAACe,GAAD,OAAoBA,EAAiB,MA6BvCvC,UAAWL,EAAQmB,YAHrB,QAOA,kBAACmB,EAAA,EAAD,CAAQO,QAAQ,YAAYC,MAAM,UAAUP,QAtCrC,WACjBV,GAAc,SAACe,GAAD,OAAoBA,EAAiB,OAsCtChB,IAAeE,EAAMM,OAAS,EAAI,cAAgB,YC1FpDW,MAXf,WACE,OACE,yBAAK1C,UAAU,OACb,yCACA,iCACE,kBAAC,EAAD,SCEY2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d40d3e31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 400,\r\n  },\r\n});\r\n\r\nfunction createData(name, charges) {\r\n  return { name, charges };\r\n}\r\n\r\nconst rows = [\r\n  createData('Product 1', '$9.99'),\r\n  createData('Product 2', '$3.45'),\r\n  createData('Product 3', '$6.31'),\r\n  createData('Product 4', '$14.11'),\r\n  createData('Shipping', 'Free'),\r\n];\r\n\r\nfunction SimpleTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Product</TableCell>\r\n            <TableCell align=\"right\">Charges</TableCell>\r\n            \r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.charges}</TableCell>\r\n              \r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\nexport default SimpleTable;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Billing,{SimpleTable} from './Billing'\r\n\r\n\r\n//table\r\n\r\n\r\n\r\n\r\n//stepper\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  backButton: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Shipping address', 'Payment details', 'Review your order'];\r\n}\r\n\r\nfunction getStepContent(stepIndex) {\r\n  switch (stepIndex) {\r\n    case 0:\r\n      return 'This is content for the first step.';\r\n    case 1:\r\n      return 'This is content for the second step.';\r\n    case 2:\r\n      return(\r\n        <div>\r\n          <Billing/>\r\n        </div>\r\n            \r\n      );\r\n    default:\r\n      return 'Unknown stepIndex';\r\n  }\r\n}\r\n\r\nexport default function HorizontalLabelPositionBelowStepper() {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const steps = getSteps();\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep} alternativeLabel>\r\n        {steps.map((label) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      <div>\r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>All steps completed</Typography>\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n            <div>\r\n              <Button\r\n                disabled={activeStep === 0}\r\n                onClick={handleBack}\r\n                className={classes.backButton}\r\n              >\r\n                Back\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n                {activeStep === steps.length - 1 ? 'PLACE ORDER' : 'Next'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Stepper from './components/Stepper'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Checkout </h1>\n      <section>\n        <Stepper/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}